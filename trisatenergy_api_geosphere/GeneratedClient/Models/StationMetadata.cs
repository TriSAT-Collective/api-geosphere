// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ApiSdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class StationMetadata : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The altitude property</summary>
        public double? Altitude { get; set; }
        /// <summary>The group_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? GroupId { get; set; }
#nullable restore
#else
        public string GroupId { get; set; }
#endif
        /// <summary>The has_global_radiation property</summary>
        public bool? HasGlobalRadiation { get; set; }
        /// <summary>The has_sunshine property</summary>
        public bool? HasSunshine { get; set; }
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The is_active property</summary>
        public bool? IsActive { get; set; }
        /// <summary>The lat property</summary>
        public double? Lat { get; set; }
        /// <summary>The lon property</summary>
        public double? Lon { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The state property</summary>
        public global::ApiSdk.Models.Bundesland? State { get; set; }
        /// <summary>The type property</summary>
        public global::ApiSdk.Models.StationMetadataType? Type { get; set; }
        /// <summary>The valid_from property</summary>
        public DateTimeOffset? ValidFrom { get; set; }
        /// <summary>The valid_to property</summary>
        public DateTimeOffset? ValidTo { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::ApiSdk.Models.StationMetadata"/> and sets the default values.
        /// </summary>
        public StationMetadata()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ApiSdk.Models.StationMetadata"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ApiSdk.Models.StationMetadata CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ApiSdk.Models.StationMetadata();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "altitude", n => { Altitude = n.GetDoubleValue(); } },
                { "group_id", n => { GroupId = n.GetStringValue(); } },
                { "has_global_radiation", n => { HasGlobalRadiation = n.GetBoolValue(); } },
                { "has_sunshine", n => { HasSunshine = n.GetBoolValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "is_active", n => { IsActive = n.GetBoolValue(); } },
                { "lat", n => { Lat = n.GetDoubleValue(); } },
                { "lon", n => { Lon = n.GetDoubleValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "state", n => { State = n.GetEnumValue<global::ApiSdk.Models.Bundesland>(); } },
                { "type", n => { Type = n.GetEnumValue<global::ApiSdk.Models.StationMetadataType>(); } },
                { "valid_from", n => { ValidFrom = n.GetDateTimeOffsetValue(); } },
                { "valid_to", n => { ValidTo = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("altitude", Altitude);
            writer.WriteStringValue("group_id", GroupId);
            writer.WriteBoolValue("has_global_radiation", HasGlobalRadiation);
            writer.WriteBoolValue("has_sunshine", HasSunshine);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("is_active", IsActive);
            writer.WriteDoubleValue("lat", Lat);
            writer.WriteDoubleValue("lon", Lon);
            writer.WriteStringValue("name", Name);
            writer.WriteEnumValue<global::ApiSdk.Models.Bundesland>("state", State);
            writer.WriteEnumValue<global::ApiSdk.Models.StationMetadataType>("type", Type);
            writer.WriteDateTimeOffsetValue("valid_from", ValidFrom);
            writer.WriteDateTimeOffsetValue("valid_to", ValidTo);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
